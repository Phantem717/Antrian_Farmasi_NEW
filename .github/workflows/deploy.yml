name: Auto Deploy to Server

on:
  push:
    branches: [ test_secret ]
jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Deploy to server
      # 1. DEFINE VARIABLES SECURELY IN THE STEP'S 'env' BLOCK
      # Use generic names for HOST/PORT here to avoid conflict with SSH parameters
      env:
        X_API_KEY: ${{ secrets.X_API_KEY }}
        BASE_URL: ${{ secrets.BASE_URL }}
        HOST_APP: ${{ secrets.HOST }} # Renamed for clarity in script
        PORT_APP: ${{ secrets.PORT }} # Renamed for clarity in script
        FE_HOST: ${{ secrets.FE_HOST }}
        FE_PORT: ${{ secrets.FE_PORT }}
        MEDIN_URL: ${{ secrets.MEDIN_URL }}
        MEDIN_URL2: ${{ secrets.MEDIN_URL2 }} # Assuming the secret name is MEDIN_URL2
        MEDIN_URL_GMCB: ${{ secrets.MEDIN_URL_GMCB }}
        X_API_KEY_MEDIN: ${{ secrets.X_API_KEY_MEDIN }}
        CONS_ID: ${{ secrets.CONS_ID }}
        PASSWORD: ${{ secrets.PASSWORD }}
        CONS_ID_FARMASI: ${{ secrets.CONS_ID_FARMASI }}
        SECRETKEY: ${{ secrets.SECRETKEY }}
        API_URL: ${{ secrets.API_URL }}
        API_WA: ${{ secrets.API_WA }}
        CONS_ID_WA: ${{ secrets.CONS_ID_WA }}
        PASSWORD_WA: ${{ secrets.PASSWORD_WA }}
        NEXT_PUBLIC_API_HOST: ${{ secrets.NEXT_PUBLIC_API_HOST }}
        NEXT_PUBLIC_API_PORT: ${{ secrets.NEXT_PUBLIC_API_PORT }}

      uses: appleboy/ssh-action@v1.0.3

      with:
        # Use the connection secrets here:
        host: ${{ secrets.DEPLOY_HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        
        # 2. FORWARD ONLY THE NECESSARY ENVIRONMENT VARIABLES
        # Note: Must use the names defined in the 'env:' block above
        envs: X_API_KEY,BASE_URL,HOST_APP,PORT_APP,FE_HOST,FE_PORT,MEDIN_URL,MEDIN_URL2,MEDIN_URL_GMCB,X_API_KEY_MEDIN,CONS_ID,PASSWORD,CONS_ID_FARMASI,SECRETKEY,API_URL,API_WA,CONS_ID_WA,PASSWORD_WA,NEXT_PUBLIC_API_HOST,NEXT_PUBLIC_API_PORT
        
        script: |
          cd /home/sirs/Antrian_Farmasi_NEW || exit 1
          
          echo "ðŸ“¦ Pulling latest changes..."
          git stash
          git pull origin test_secret
          
          # The shell variables are now defined and can be used in the cat commands
          # Use HOST_APP/PORT_APP for the .env files
          
          echo "ðŸ”§ Creating backend .env file..."
          cat > backend/.env << EOF
          X_API_KEY=${X_API_KEY}
          BASE_URL=${BASE_URL}
          HOST=${HOST_APP}
          PORT=${PORT_APP}
          FE_HOST=${FE_HOST}
          FE_PORT=${FE_PORT}
          MEDIN_URL=${MEDIN_URL}
          MEDIN_URL2=${MEDIN_URL2}
          MEDIN_URL_GMCB=${MEDIN_URL_GMCB}
          X_API_KEY_MEDIN=${X_API_KEY_MEDIN}
          CONS_ID=${CONS_ID}
          PASSWORD=${PASSWORD}
          CONS_ID_FARMASI=${CONS_ID_FARMASI}
          SECRETKEY=${SECRETKEY}
          API_URL=${API_URL}
          API_WA=${API_WA}
          CONS_ID_WA=${CONS_ID_WA}
          PASSWORD_WA=${PASSWORD_WA}
          EOF
          
          echo "ðŸ”§ Creating frontend .env file..."
          cat > frontend/.env << EOF
          NEXT_PUBLIC_API_HOST=${NEXT_PUBLIC_API_HOST}
          NEXT_PUBLIC_API_PORT=${NEXT_PUBLIC_API_PORT}
          EOF
          
          echo "ðŸ§± Rebuilding backend..."
          cd backend
          docker-compose down
          docker-compose up -d --build
          
          echo "ðŸ§± Rebuilding frontend..."
          cd ../frontend
          docker-compose down
          docker-compose up -d --build
          
          echo "âœ… Checking container status..."
          docker ps
          
          echo "ðŸ§¹ Cleaning up unused images and secrets..."
          # CRITICAL: Delete the plaintext .env files immediately
          rm ../backend/.env
          rm ./.env
          docker image prune -f
          
          echo "âœ… Deployment complete!"